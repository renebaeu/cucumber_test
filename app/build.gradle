buildscript {
    repositories {
        google()
        jcenter()
    }
}

plugins {
    id "pl.droidsonroids.animation-disabler" version "1.0.7"
}

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
apply plugin: 'pl.droidsonroids.animation-disabler'



android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "de.renebaeumer"
        minSdkVersion 24
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testApplicationId "de.renebaeumer.test"
        testInstrumentationRunner "de.renebaeumer.test.runner.CucumberTestRunner"
    }
    buildTypes {
        debug {
            buildConfigField 'String', 'TEST_TAGS', '"'+getTestTags()+'"'
            buildConfigField 'String', 'TEST_SCENARIO', '"'+getTestScenario()+'"'
//            applicationIdSuffix ".alpha"
            debuggable = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // With the following option we does not have to mock everything,
    // e.g. super calls cannot be mocked with Mockito only (just with Powermock).
    testOptions {
        unitTests.returnDefaultValues = true
        animationsDisabled true
//        uncomment this to run tests with orchestrator
//        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

}



dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

//    testImplementation 'junit:junit:4.13'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestUtil 'androidx.test:orchestrator:1.2.0'

    androidTestImplementation "io.cucumber:cucumber-java8:4.4.0"
    androidTestImplementation "io.cucumber:cucumber-android:4.4.0"
    androidTestImplementation "io.cucumber:cucumber-picocontainer:4.4.0"


    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'


}


def getInstrumentation() {
    project.hasProperty('cucumber') ?
            'de.hotel.test.runner.CucumberTestRunner' :
                    'androidx.test.runner.AndroidJUnitRunner'
}

def getTestTags() {
    project.getProperties().get('tags') ?: ''
}
def getTestScenario() {
    project.getProperties().get('scenario') ?: ''
}

task runInstrumentationTests {
    group "verification"
    mustRunAfter "deleteExistingCucumberReports"
    dependsOn "deleteExistingCucumberReports","spoonDebugAndroidTest"
    finalizedBy "downloadCucumberReports"
}




/*
 * Downloads all Cucumber reports from the connected device.
 */
task downloadCucumberReports {
    group "Verification"
    description "Downloads the rich Cucumber report files (HTML, XML, JSON) from the connected device"

    doLast {
        def deviceSourcePath = getCucumberDevicePath()
        def localReportPath = new File(buildDir, "reports/cucumber")
        if (!localReportPath.exists()) {
            localReportPath.mkdirs()
        }
        if (!localReportPath.exists()) {
            throw new GradleException("Could not create $localReportPath")
        }
        def adb = getAdbPath()
        def files = getCucumberReportFileNames()
        files.each { fileName ->
            exec {
                commandLine adb, 'pull', "$deviceSourcePath/$fileName", localReportPath
            }
        }
    }
}

/**
 * Deletes existing Cucumber reports on the device.
 */
task deleteExistingCucumberReports {
    group "Verification"
    description "Removes the rich Cucumber report files (HTML, XML, JSON) from the connected device"
    doLast {
        def deviceSourcePath = getCucumberDevicePath()
        def files = getCucumberReportFileNames()
        files.each { fileName ->
            def deviceFileName = deviceSourcePath + '/' + fileName
            def output2 = executeAdb('if [ -d "' + deviceFileName + '" ]; then rm -r "' + deviceFileName + '"; else rm -r "' + deviceFileName + '" ; fi')
            println output2
        }
    }
}

/**
 * Sets the required permissions for Cucumber to write on the internal storage.
 */
task grantPermissions(dependsOn: 'installDebug') {
    doLast {
        def adb = getAdbPath()
        // We only set the permissions for the main application
        def mainPackageName = android.defaultConfig.applicationId
        def readPermission = "android.permission.READ_EXTERNAL_STORAGE"
        def writePermission = "android.permission.WRITE_EXTERNAL_STORAGE"
        exec { commandLine adb, 'shell', 'pm', 'grant', mainPackageName, readPermission }
        exec { commandLine adb, 'shell', 'pm', 'grant', mainPackageName, writePermission }
    }
}


// ==================================================================
// Utility methods
// ==================================================================

/**
 * Utility method to get the full ADB path
 * @return the absolute ADB path
 */
String getAdbPath() {
    def adb = android.getAdbExecutable().toString()
    if (adb.isEmpty()) {
        throw new GradleException("Could not detect adb path")
    }
    return adb
}

/**
 * Sometime adb returns '\r' character multiple times.
 * @param s the original string returned by adb
 * @return the fixed string without '\r'
 */
static def fixAdbOutput(String s) {
    return s.replaceAll("[\r\n]+", "\n").trim()
}

/**
 * Runs the adb tool
 * @param program the program which is executed on the connected device
 * @return the output of the adb tool
 */
def executeAdb(String program) {
    def process = new ProcessBuilder(getAdbPath(), "shell", program).redirectErrorStream(true).start()
    String text = new BufferedReader(new InputStreamReader(process.inputStream)).text
    return fixAdbOutput(text)
}

/**
 * The path which is used to store the Cucumber files.
 * @return
 */
def getCucumberDevicePath() {
    return 'sdcard/Android/data/cucumber.cukeulator/files/reports'
}

/**
 * @return the known Cucumber report files/directories
 */
static def getCucumberReportFileNames() {
    return ['cucumber.xml', 'cucumber.html']
}
